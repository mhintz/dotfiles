" Things to do:
" Set up NERDTree config options
" Read through spf13 vim config and apply the useful stuff from it
" Set up alt-delete and alt-movements in insert mode the way you like them
" Add comments explaining everything
" set up vim-one colors: https://github.com/rakr/vim-one
" set up vim-one tmux snd tmuxline support
" read this:
" http://homeonrails.com/2016/05/truecolor-in-gnome-terminal-tmux-and-neovim/
" set up vim-airline: https://github.com/vim-airline/vim-airline
" delete lines, etc, without overwriting current copy buffer (split the copy
" buffer into a separate buffer?)
" read :help filetype-overview to understand "filetype plugin indent on"
" set up javascript syntax plugin
" set up Ctrl-P to have more search command options, or possibly setup the
" "Command-T" plugin

execute pathogen#infect()
" to generate documentation for all pathogen-installed plugins, run :Helptags

" this might be unnecessary, but it's nice to be clear
set nocompatible

" syntax highlighting
syntax on

" encoding
set encoding=utf-8

" turn on filetype, plugin, and indent
filetype plugin indent on

" set up the theme and syntax highlighting

" I think this is required for vim-one
set t_8b=[48;2;%lu;%lu;%lum
set t_8f=[38;2;%lu;%lu;%lum

set termguicolors

" italics
let g:one_allow_italics = 1

" set the color scheme, then select the type
colorscheme one
set background=dark

" use with vim-airline as well
let g:airline_theme='one'

" reloads when a file is changed in the background
set autoread

" incremental search
set incsearch
" highlighted search
set hlsearch

" expected backspace behavior (backspace can delete over indent, eol, and the
" start of your editing)
set backspace=indent,eol,start
" and arrow key movement wraps around line breaks
set whichwrap+=<,>

" history settings
set history=50

" vim "UI" settings
set ruler
set showcmd
set number

set backup
" set vim directories for undo, backup, and swap files
set undodir=$HOME/.vim/.undo//
set backupdir=$HOME/.vim/.backup//
set directory^=$HOME/.vim/.swp//

" try to keep the cursor at least 3 lines from the edge of the window
set scrolloff=3

" allow files to be open as buffers without being visible
set hidden

" no line wrap
set nowrap

" indentation settings
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" ****** SET LEADER KEY ******
let mapleader = " "

" ****** PLUGIN SETTINGS ******

" ctrlp settings
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_extensions = ['dir']

" NERDTree Settings
nnoremap <leader>o :NERDTreeToggle<CR>
let g:NERDTreeWinSize=20
let g:NERDTreeShowHidden=1
" open a NERDTree automatically (and move to the main window) when vim is
" opened or a new tab is made
autocmd vimenter * NERDTree | wincmd l
autocmd tabnew * NERDTree | wincmd l
" close the nerd tree window if it's the last one open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" multi-cursor settings
let g:multi_cursor_next_key='<C-g>'

" ack package settings
" let g:ackprg = 'ag --vimgrep --smart-case'
" cnoreabbrev ag Ack
" cnoreabbrev aG Ack
" cnoreabbrev Ag Ack
" cnoreabbrev AG Ack

" ****** KEYBINDINGS ******

" manually reload vim config
nnoremap <leader>r :source ~/.vim/vimrc<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
" this command will reopen the last-edited file
nnoremap <Leader><Leader> :e#<CR>

" move between windows
noremap <leader>j <C-W>j
noremap <leader>k <C-W>k
noremap <leader>l <C-W>l
noremap <leader>h <C-W>h

" clear search highlights if they add visual clutter
noremap <leader>c :nohlsearch<CR>

" create tabs
noremap <leader>n :tabnew<CR>

" move between tabs
noremap <leader><Left> :tabp<CR>
noremap <leader><Right> :tabn<CR>

noremap <leader>1 :tabnext 1<CR>
noremap <leader>2 :tabnext 2<CR>
noremap <leader>3 :tabnext 3<CR>
noremap <leader>4 :tabnext 4<CR>
noremap <leader>5 :tabnext 5<CR>
noremap <leader>6 :tabnext 6<CR>
noremap <leader>7 :tabnext 7<CR>
noremap <leader>8 :tabnext 8<CR>
noremap <leader>9 :tabnext 9<CR>

noremap <leader><C-w> :tabclose<CR>

" faster scrolling
noremap <C-n> 6<C-e>6j
noremap <C-m> 6<C-y>6k

noremap <C-j> 6j
noremap <C-k> 6k

noremap <C-M-n> 6<C-e>
noremap <C-M-m> 6<C-y>

" start / end of line movement like emacs
noremap <C-a> ^
noremap <C-e> $

inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$

cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" delete into a specific buffer (buffer d)
nnoremap dd "ddd
vnoremap <C-x> "xx

" move lines of text around vertically
nnoremap <C-M-j> mz:m+<cr>`z
nnoremap <C-M-k> mz:m-2<cr>`z
vnoremap <C-M-j> :m'>+<cr>`<my`>mzgv`yo`z
vnoremap <C-M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" moving around in insert mode
inoremap <M-j> <C-o>j
inoremap <M-k> <C-o>k
inoremap <M-b> <C-o>b
inoremap <M-e> <ESC>eli

" while I learn, some key bindings to make me feel like home :)
" (there's more to these lines than meets the eye)

" this is <M-Right>
inoremap f <C-o>e
" this is <M-Left>
inoremap b <C-o>b
" this is <M-up>
inoremap [1;3A <C-o>6k
" this is <M-down>
inoremap [1;3B <C-o>6j
" this one's weird. It's <M-BS>
inoremap  <C-w>

" these lines provide some simple context scrolling in insert mode (I know
" it's bad to add weird movement commands in insert mode but I can't help it)
inoremap <M-m> <ESC>6<C-y>6ki
inoremap <M-n> <ESC>6<C-e>6ji
